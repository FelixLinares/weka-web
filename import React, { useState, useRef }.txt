import React, { useState, useRef } from 'react';
import { Bar, Line } from 'react-chartjs-2';
import { jsPDF } from 'jspdf';
import 'chart.js/auto';
import 'jspdf-autotable';

// --- Componente principal ---
function WekaWeb() {
  // Estados
  const [fileContent, setFileContent] = useState('');
  const [algorithm, setAlgorithm] = useState('decision-tree');
  const [results, setResults] = useState(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [fileInfo, setFileInfo] = useState(null);
  const [notifications, setNotifications] = useState([]);
  const fileInputRef = useRef(null);

  // Datos de ejemplo para la gráfica de barras
  const performanceData = {
    labels: ['Precisión', 'Recall', 'F1‑Score', 'ROC AUC'],
    datasets: [
      {
        label: 'Métricas',
        data: [0.92, 0.89, 0.91, 0.94],
        backgroundColor: 'rgba(63, 81, 181, 0.7)',
        borderColor: 'rgba(63, 81, 181, 1)',
        borderWidth: 2,
      },
    ],
  };

  // --- Utilidad de notificaciones ---
  const showNotification = (message, type = 'info') => {
    const id = Date.now();
    setNotifications(prev => [...prev, { id, message, type }]);
    setTimeout(() => {
      setNotifications(prev => prev.filter(n => n.id !== id));
    }, 5000);
  };

  // --- Carga de archivos ---
  const handleFileUpload = e => {
    const file = e.target.files[0];
    if (!file) return;

    setFileInfo({
      name: file.name,
      size: `${(file.size / 1024).toFixed(2)} KB`,
      type: file.type || file.name.split('.').pop().toUpperCase(),
    });

    const reader = new FileReader();
    reader.onload = ev => {
      setFileContent(ev.target.result);
      showNotification(`Archivo ${file.name} cargado correctamente`, 'success');
    };
    reader.onerror = () => showNotification('Error al leer el archivo', 'error');
    reader.readAsText(file);
  };

  // --- Exportar a PDF ---
  const exportToPDF = () => {
    const doc = new jsPDF();
    doc.setFontSize(20);
    doc.text('Resultados del Análisis - Weka Universitario', 15, 20);

    doc.setFontSize(14);
    doc.text('Métricas Principales:', 15, 40);

    const metrics = [
      ['Precisión', `${(results.accuracy * 100).toFixed(2)}%`],
      ['Recall', `${(results.metrics.recall * 100).toFixed(2)}%`],
      ['F1‑Score', `${(results.metrics.f1 * 100).toFixed(2)}%`],
      ['ROC AUC', `${(results.metrics.roc * 100).toFixed(2)}%`],
    ];

    doc.autoTable({
      startY: 45,
      head: [['Métrica', 'Valor']],
      body: metrics,
      theme: 'grid',
      headStyles: { fillColor: [63, 81, 181] },
    });

    doc.text('Matriz de Confusión:', 15, doc.autoTable.previous.finalY + 20);
    doc.autoTable({
      startY: doc.autoTable.previous.finalY + 25,
      head: [['', 'Predicción Positiva', 'Predicción Negativa']],
      body: [
        ['Real Positiva', results.confusionMatrix[0][0], results.confusionMatrix[0][1]],
        ['Real Negativa', results.confusionMatrix[1][0], results.confusionMatrix[1][1]],
      ],
      theme: 'grid',
    });

    doc.save('resultados-weka.pdf');
    showNotification('PDF exportado correctamente', 'success');
  };

  // --- Exportar a CSV ---
  const exportToCSV = () => {
    let csv =
      'Métrica,Valor\n' +
      `Precisión,${(results.accuracy * 100).toFixed(2)}%\n` +
      `Recall,${(results.metrics.recall * 100).toFixed(2)}%\n` +
      `F1‑Score,${(results.metrics.f1 * 100).toFixed(2)}%\n` +
      `ROC AUC,${(results.metrics.roc * 100).toFixed(2)}%\n\n` +
      'Matriz de Confusión\n' +
      ',Predicción Positiva,Predicción Negativa\n' +
      `Real Positiva,${results.confusionMatrix[0][0]},${results.confusionMatrix[0][1]}\n` +
      `Real Negativa,${results.confusionMatrix[1][0]},${results.confusionMatrix[1][1]}\n`;

    const link = document.createElement('a');
    link.href = URL.createObjectURL(new Blob([csv], { type: 'text/csv' }));
    link.download = 'resultados-weka.csv';
    link.click();
    showNotification('CSV exportado correctamente', 'success');
  };

  // --- Exportar a ARFF ---
  const exportToARFF = () => {
    const arff =
      '% Resultados Weka Universitario\n@RELATION resultados\n\n' +
      '@ATTRIBUTE precision NUMERIC\n@ATTRIBUTE recall NUMERIC\n' +
      '@ATTRIBUTE f1score NUMERIC\n@ATTRIBUTE rocauc NUMERIC\n\n@DATA\n' +
      `${results.accuracy},${results.metrics.recall},${results.metrics.f1},${results.metrics.roc}\n`;

    const link = document.createElement('a');
    link.href = URL.createObjectURL(new Blob([arff], { type: 'text/plain' }));
    link.download = 'resultados-weka.arff';
    link.click();
    showNotification('ARFF exportado correctamente', 'success');
  };

  // --- Procesamiento simulado ---
  const handleProcess = () => {
    if (!fileContent) {
      showNotification('Por favor carga un dataset primero', 'warning');
      return;
    }
    setIsProcessing(true);
    showNotification('Procesando dataset…', 'info');

    setTimeout(() => {
      setResults({
        accuracy: 0.92,
        confusionMatrix: [
          [120, 8],
          [5, 115],
        ],
        metrics: { precision: 0.92, recall: 0.89, f1: 0.91, roc: 0.94 },
        algorithmUsed: algorithm,
      });
      setIsProcessing(false);
      showNotification('Análisis completado con éxito', 'success');
    }, 3000);
  };

  // --- Render ---
  return (
    <div style={styles.container}>
      {/* Notificaciones */}
      <div style={styles.notificationsContainer}>
        {notifications.map(n => (
          <div
            key={n.id}
            style={{
              ...styles.notification,
              backgroundColor:
                n.type === 'error'
                  ? '#ffebee'
                  : n.type === 'success'
                  ? '#e8f5e9'
                  : '#e3f2fd',
              borderLeft:
                n.type === 'error'
                  ? '4px solid #f44336'
                  : n.type === 'success'
                  ? '4px solid #4caf50'
                  : '4px solid #2196f3',
            }}
          >
            {n.message}
          </div>
        ))}
      </div>

      {/* Header */}
      <header style={styles.header}>
        <h1 style={styles.headerTitle}>
          <i className="fas fa-brain" style={styles.headerIcon}></i>Weka Universitario
        </h1>
      </header>

      {/* Panel principal */}
      <div style={styles.mainPanel}>
        {/* Panel datos */}
        <div style={styles.dataPanel}>
          <h2 style={styles.panelTitle}>
            <i className="fas fa-database" style={styles.panelIcon}></i>Cargar Dataset
          </h2>

          {/* Info archivo */}
          {fileInfo && (
            <div style={styles.fileInfo}>
              <div><strong>Archivo:</strong> {fileInfo.name}</div>
              <div><strong>Tamaño:</strong> {fileInfo.size}</div>
              <div><strong>Tipo:</strong> {fileInfo.type}</div>
            </div>
          )}

          {/* Textarea + botones */}
          <div style={styles.fileInputContainer}>
            <textarea
              placeholder="Pega tus datos aquí o carga un archivo…"
              style={styles.textarea}
              value={fileContent}
              onChange={e => setFileContent(e.target.value)}
            />
            <div style={styles.fileButtons}>
              <button onClick={() => fileInputRef.current.click()} style={styles.uploadButton}>
                <i className="fas fa-upload" style={styles.buttonIcon}></i>Cargar Archivo
              </button>
              <input
                type="file"
                ref={fileInputRef}
                style={{ display: 'none' }}
                onChange={handleFileUpload}
              />
              <button
                onClick={() => {
                  setFileContent('');
                  setFileInfo(null);
                  showNotification('Datos limpiados', 'info');
                }}
                style={styles.clearButton}
              >
                <i className="fas fa-trash-alt" style={styles.buttonIcon}></i>Limpiar
              </button>
            </div>
          </div>
        </div>

        {/* Panel configuración */}
        <div style={styles.configPanel}>
          <h2 style={styles.panelTitle}>
            <i className="fas fa-sliders-h" style={styles.panelIcon}></i>Configuración
          </h2>

          {/* Algoritmo */}
          <div style={styles.formGroup}>
            <label style={styles.label}>Algoritmo:</label>
            <select
              value={algorithm}
              onChange={e => setAlgorithm(e.target.value)}
              style={styles.select}
            >
              <option value="decision-tree">Árbol de Decisión (J48)</option>
              <option value="svm">SVM</option>
              <option value="knn">KNN</option>
              <option value="naive-bayes">Naive Bayes</option>
              <option value="random-forest">Random Forest</option>
              <option value="mlp">Perceptrón Multicapa</option>
              <option value="logistic-regression">Regresión Logística</option>
            </select>
          </div>

          {/* Botón ejecutar */}
          <button
            onClick={handleProcess}
            disabled={isProcessing}
            style={{
              ...styles.processButton,
              backgroundColor: isProcessing ? '#9e9e9e' : '#4caf50',
            }}
          >
            {isProcessing ? (
              <>
                <i className="fas fa-spinner fa-spin" style={styles.buttonIcon}></i>Procesando…
              </>
            ) : (
              <>
                <i className="fas fa-play" style={styles.buttonIcon}></i>Ejecutar Análisis
              </>
            )}
          </button>
        </div>
      </div>

      {/* Resultados */}
      {results && (
        <div style={styles.resultsPanel}>
          <h2 style={styles.panelTitle}>
            <i className="fas fa-chart-bar" style={styles.panelIcon}></i>Resultados
          </h2>

          {/* Métricas */}
          <div style={styles.metricsGrid}>
            {[
              { label: 'Precisión', value: results.accuracy },
              { label: 'Recall', value: results.metrics.recall },
              { label: 'F1‑Score', value: results.metrics.f1 },
              { label: 'ROC AUC', value: results.metrics.roc },
            ].map(m => (
              <div key={m.label} style={styles.metricCard}>
                <div style={styles.metricLabel}>{m.label}</div>
                <div style={styles.metricValue}>{(m.value * 100).toFixed(2)}%</div>
              </div>
            ))}
          </div>

          {/* Gráficas */}
          <div style={styles.chartsContainer}>
            <div style={styles.chart}>
              <h3 style={styles.chartTitle}>Métricas de Rendimiento</h3>
              <div style={{ height: 300 }}>
                <Bar
                  data={performanceData}
                  options={{
                    responsive: true,
                    plugins: { legend: { display: false } },
                    scales: { y: { beginAtZero: true, max: 1 } },
                  }}
                />
              </div>
            </div>

            <div style={styles.chart}>
              <h3 style={styles.chartTitle}>Matriz de Confusión</h3>
              <div style={{ height: 300 }}>
                <Line
                  data={{
                    labels: ['VP', 'FP', 'FN', 'VN'],
                    datasets: [
                      {
                        data: results.confusionMatrix.flat(),
                        backgroundColor: [
                          'rgba(76,175,80,0.7)',
                          'rgba(244,67,54,0.7)',
                          'rgba(244,67,54,0.7)',
                          'rgba(76,175,80,0.7)',
                        ],
                        borderWidth: 1,
                      },
                    ],
                  }}
                  options={{ responsive: true, plugins: { legend: { display: false } } }}
                />
              </div>
            </div>
          </div>

          {/* Exportar */}
          <div style={styles.exportButtons}>
            <button onClick={exportToPDF} style={styles.exportButton}>
              <i className="fas fa-file-pdf" style={styles.buttonIcon}></i>PDF
            </button>
            <button onClick={exportToCSV} style={styles.exportButton}>
              <i className="fas fa-file-csv" style={styles.buttonIcon}></i>CSV
            </button>
            <button onClick={exportToARFF} style={styles.exportButton}>
              <i className="fas fa-file-code" style={styles.buttonIcon}></i>ARFF
            </button>
          </div>
        </div>
      )}

      {/* Footer */}
      <footer style={styles.footer}>
        Weka Universitario © {new Date().getFullYear()}
      </footer>
    </div>
  );
}

// --- Estilos en línea (podrías moverlos a CSS) ---
const styles = {
  container: {
    fontFamily: 'Segoe UI, Tahoma, sans-serif',
    maxWidth: 1400,
    margin: '0 auto',
    padding: 20,
    backgroundColor: '#f5f7fa',
    minHeight: '100vh',
  },
  notificationsContainer: {
    position: 'fixed',
    top: 20,
    right: 20,
    zIndex: 1000,
    maxWidth: 400,
  },
  notification: {
    padding: 15,
    marginBottom: 10,
    borderRadius: 4,
    boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
    color: '#333',
  },
  header: {
    background: 'linear-gradient(135deg,#3f51b5 0%,#303f9f 100%)',
    color: '#fff',
    padding: 25,
    borderRadius: 8,
    marginBottom: 30,
    boxShadow: '0 4px 6px rgba(0,0,0,0.1)',
  },
  headerTitle: {
    margin: 0,
    fontSize: 28,
    fontWeight: 500,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
  },
  headerIcon: { marginRight: 15, fontSize: 28 },
  mainPanel: {
    display: 'grid',
    gridTemplateColumns: '1fr 1fr',
    gap: 25,
    marginBottom: 30,
  },
  dataPanel: {
    backgroundColor: '#fff',
    padding: 25,
    borderRadius: 8,
    boxShadow: '0 2px 10px rgba(0,0,0,0.05)',
  },
  configPanel: {
    backgroundColor: '#fff',
    padding: 25,
    borderRadius: 8,
    boxShadow: '0 2px 10px rgba(0,0,0,0.05)',
  },
  panelTitle: {
    color: '#3f51b5',
    borderBottom: '2px solid #3f51b5',
    paddingBottom: 12,
    marginTop: 0,
    marginBottom: 20,
    fontSize: 20,
    display: 'flex',
    alignItems: 'center',
  },
  panelIcon: { marginRight: 12, fontSize: 20 },
  formGroup: { marginBottom: 20 },
  label: {
    display: 'block',
    marginBottom: 8,
    fontWeight: 500,
    color: '#555',
    fontSize: 14,
  },
  select: {
    width: '100%',
    padding: 12,
    borderRadius: 6,
    border: '1px solid #ddd',
    backgroundColor: '#fff',
    fontSize: 14,
  },
  fileInfo: {
    backgroundColor: '#f5f5f5',
    padding: 15,
    borderRadius: 6,
    marginBottom: 20,
    fontSize: 14,
    lineHeight: 1.6,
  },
  fileInputContainer: { marginTop: 15 },
  textarea: {
    width: '100%',
    height: 200,
    padding: 15,
    borderRadius: 6,
    border: '1px solid #ddd',
    fontFamily: 'Consolas, monospace',
    fontSize: 13,
    resize: 'vertical',
    marginBottom: 15,
  },
  fileButtons: { display: 'flex', gap: 15 },
  uploadButton: {
    padding: '12px 20px',
    backgroundColor: '#3f51b5',
    color: '#fff',
    border: 'none',
    borderRadius: 6,
    cursor: 'pointer',
    display: 'flex',
    alignItems: 'center',
    fontSize: 14,
  },
  clearButton: {
    padding: '12px 20px',
    backgroundColor: '#f5f7fa',
    border: '1px solid #ddd',
    borderRadius: 6,
    cursor: 'pointer',
    display: 'flex',
    alignItems: 'center',
    fontSize: 14,
  },
  buttonIcon: { marginRight: 8, fontSize: 14 },
  processButton: {
    width: '100%',
    padding: 15,
    color: '#fff',
    border: 'none',
    borderRadius: 6,
    cursor: 'pointer',
    fontSize: 16,
    fontWeight: 'bold',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },
  resultsPanel: {
    backgroundColor: '#fff',
    padding: 30,
    borderRadius: 8,
    boxShadow: '0 2px 10px rgba(0,0,0,0.05)',
    marginTop: 20,
  },
  metricsGrid: {
    display: 'grid',
    gridTemplateColumns: 'repeat(4,1fr)',
    gap: 20,
    marginBottom: 30,
  },
  metricCard: {
    backgroundColor: '#fff',
    border: '1px solid #e0e0e0',
    borderRadius: 8,
    padding: 20,
    textAlign: 'center',
    boxShadow: '0 2px 5px rgba(0,0,0,0.05)',
  },
  metricLabel: { color: '#555', fontSize: 14, marginBottom: 10 },
  metricValue: { color: '#3f51b5', fontSize: 28, fontWeight: 'bold' },
  chartsContainer: {
    display: 'grid',
    gridTemplateColumns: '1fr 1fr',
    gap: 30,
    marginBottom: 30,
  },
  chart: {
    backgroundColor: '#fff',
    border: '1px solid #e0e0e0',
    borderRadius: 8,
    padding: 20,
    boxShadow: '0 2px 5px rgba(0,0,0,0.05)',
  },
  chartTitle: { color: '#555', marginTop: 0, marginBottom: 20, textAlign: 'center', fontSize: 16 },
  exportButtons: { display: 'flex', justifyContent: 'flex-end', gap: 15, marginTop: 30 },
  exportButton: {
    padding: '12px 20px',
    backgroundColor: '#3f51b5',
    color: '#fff',
    border: 'none',
    borderRadius: 6,
    cursor: 'pointer',
    display: 'flex',
    alignItems: 'center',
    fontSize: 14,
  },
  footer: {
    marginTop: 50,
    textAlign: 'center',
    color: '#777',
    fontSize: 14,
    padding: '20px 0',
    borderTop: '1px solid #eee',
  },
};

export default WekaWeb;
